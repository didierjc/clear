Clear | Framework

Model–View–Controller (MVC) : architectural pattern used in software engineering. Successful use of the pattern isolates business logic from user interface considerations, resulting in an application where it is easier to modify either the visual appearance of the application or the underlying business rules without affecting the other. In MVC, the model represents the data of the application; the view corresponds to elements of the user interface such as text, checkbox items, and so forth; and the controller manages the communication of data and the business rules used to manipulate the data to and from the model

In Clearer words-

1. Model handles all our database logic. Using the model we connect to our database and provide an abstraction layer.
2. Controller represents all our business logic i.e. all of the ifs and else.
3. View represents our presentation logic i.e our HTML/XML/JSON code.

Directory Structure-

1. application - application specific code 
2. clear - framework code 
3. configuration - database/server configuration
4. library - 3rd party classes, i.e. Facebook, Twitter, HTMLPurify, etc.
5. public - all public requests goes here; .htaccess file in the root directory will redirect all calls to this folder
6. scripts - command-line utilities
7. skins - theming engine
8. tmp - temporary data

Coding Conventions-

1. database tables will always be lowercase, plural, begin with "clr_tbl_" i.e. clr_tbl_items, clr_tbl_cars, clr_tbl_users
2. Model files & classes will always be lowercase, singular and begin with "model_" i.e. model_item, model_car, model_user
3. Controller files & classes will always be lowercase, plural and begin with "controller_" i.e. controller_items, controller_cars, controller_users
4. Views will begin with "view_" and have the plural name followed by action name as the file i.e. view_items/view.php, view_cars/buy.php, view_users/add.php

Bootstraping-

* .htaccess file in the root directory will redirect all calls to the public folder


